// MIT License Copyright (C) 2022 kubefay@https://github.com/kubefay/kubefay
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubefay/kubefay/pkg/apis/ipam/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SubNetLister helps list SubNets.
// All objects returned here must be treated as read-only.
type SubNetLister interface {
	// List lists all SubNets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubNet, err error)
	// SubNets returns an object that can list and get SubNets.
	SubNets(namespace string) SubNetNamespaceLister
	SubNetListerExpansion
}

// subNetLister implements the SubNetLister interface.
type subNetLister struct {
	indexer cache.Indexer
}

// NewSubNetLister returns a new SubNetLister.
func NewSubNetLister(indexer cache.Indexer) SubNetLister {
	return &subNetLister{indexer: indexer}
}

// List lists all SubNets in the indexer.
func (s *subNetLister) List(selector labels.Selector) (ret []*v1alpha1.SubNet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubNet))
	})
	return ret, err
}

// SubNets returns an object that can list and get SubNets.
func (s *subNetLister) SubNets(namespace string) SubNetNamespaceLister {
	return subNetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SubNetNamespaceLister helps list and get SubNets.
// All objects returned here must be treated as read-only.
type SubNetNamespaceLister interface {
	// List lists all SubNets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SubNet, err error)
	// Get retrieves the SubNet from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SubNet, error)
	SubNetNamespaceListerExpansion
}

// subNetNamespaceLister implements the SubNetNamespaceLister
// interface.
type subNetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SubNets in the indexer for a given namespace.
func (s subNetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SubNet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SubNet))
	})
	return ret, err
}

// Get retrieves the SubNet from the indexer for a given namespace and name.
func (s subNetNamespaceLister) Get(name string) (*v1alpha1.SubNet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("subnet"), name)
	}
	return obj.(*v1alpha1.SubNet), nil
}
