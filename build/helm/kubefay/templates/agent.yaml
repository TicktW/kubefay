---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: kubefay-agent
  namespace: {{ .Values.namespace }}
  labels:
    component: kubefay-agent
spec:
  selector:
    matchLabels:
      component: kubefay-agent
  {{- if not .Values.kindCluster.enabled }}
  updateStrategy:
    type: RollingUpdate
  {{- else }}
  updateStrategy:
    type: OnDelete
  {{- end }}
  template:
    metadata:
      labels:
        component: kubefay-agent
    spec:
      hostNetwork: true
      priorityClassName: system-node-critical
      tolerations:
        # Mark it as a critical add-on.
        - key: CriticalAddonsOnly
          operator: Exists
        # Make sure it gets scheduled on all nodes.
        - effect: NoSchedule
          operator: Exists
        # Make sure it doesn't get evicted.
        - effect: NoExecute
          operator: Exists
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: kubefay-agent
      initContainers:
        - name: install-cni
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            requests:
              cpu: "100m"
          {{- if not .Values.kindCluster.enabled }}
          command: ["install_cni"]
          {{- else }}
          command: ["install_cni_kind"]
          {{- end }}
          securityContext:
            capabilities:
              add:
                # SYS_MODULE is required to load the OVS kernel module.
                - SYS_MODULE
          volumeMounts:
          - name: kubefay-config
            mountPath: /etc/kubefay/kubefay-cni.conflist
            subPath: kubefay-cni.conflist
            readOnly: true
          - name: host-cni-conf
            mountPath: /host/etc/cni/net.d
          - name: host-cni-bin
            mountPath: /host/opt/cni/bin
          # For loading the OVS kernel module.
          - name: host-lib-modules
            mountPath: /lib/modules
            readOnly: true
          # depmod is required by modprobe when the Node OS is different from
          # that of the Antrea Docker image.
          - name: host-depmod
            mountPath: /sbin/depmod
            readOnly: true
          - name: host-var-run-kubefay
            mountPath: /var/run/kubefay
      containers:
        - name: kubefay-agent
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            requests:
              cpu: "200m"
          command: ["kubefay-agent"]
          # Log to both "/var/log/kubefay/" and stderr (so "kubectl logs" can work).
          # args: ["--config", "/etc/kubefay/kubefay-agent.conf", "--logtostderr=false", "--log_dir=/var/log/kubefay", "--alsologtostderr", "--log_file_max_size=100", "--log_file_max_num=4", "--v=0"]
          {{- if .Values.devEnv }}
          args: ["--v=5"]
          {{- end }}
          env:
            # Provide pod and node information for clusterinformation CRD.
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          ports:
            - containerPort: 10350
              name: api
              protocol: TCP
          {{- if .Values.podProbe }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - container_liveness_probe agent
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 5
          readinessProbe:
            httpGet:
              host: 127.0.0.1
              path: /healthz
              port: api
              scheme: HTTPS
            initialDelaySeconds: 5
            timeoutSeconds: 5
            periodSeconds: 10
            failureThreshold: 5
          {{- end }}
          securityContext:
            # kubefay-agent needs to perform sysctl configuration.
            privileged: true
          volumeMounts:
          - name: kubefay-config
            mountPath: /etc/kubefay/kubefay-agent.conf
            subPath: kubefay-agent.conf
            readOnly: true
          - name: host-var-run-kubefay
            mountPath: /var/run/kubefay
          - name: host-var-run-kubefay
            mountPath: /var/run/openvswitch
            subPath: openvswitch
          # host-local IPAM stores allocated IP addresses as files in /var/lib/cni/networks/$NETWORK_NAME.
          # Mount a sub-directory of host-var-run-kubefay to it for persistence of IP allocation.
          - name: host-var-run-kubefay
            mountPath: /var/lib/cni
            subPath: cni
          # We need to mount both the /proc directory and the /var/run/netns directory so that
          # kubefay-agent can open the network namespace path when setting up Pod
          # networking. Different container runtimes may use /proc or /var/run/netns when invoking
          # the CNI commands. Docker uses /proc and containerd uses /var/run/netns.
          - name: host-var-log-kubefay
            mountPath: /var/log/kubefay
          - name: host-proc
            mountPath: /host/proc
            readOnly: true
          - name: host-var-run-netns
            mountPath: /host/var/run/netns
            readOnly: true
            # When a container is created, a mount point for the network namespace is added under
            # /var/run/netns on the host, which needs to be propagated to the kubefay-agent container.
            mountPropagation: HostToContainer
          - name: xtables-lock
            mountPath: /run/xtables.lock
        - name: kubefay-ovs
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          resources:
            requests:
              cpu: "200m"
          {{- if not .Values.kindCluster.enabled }}
          command: ["start_ovs"]
          {{- else }}
          command: ["start_ovs_netdev"]
          {{- end }}
          args: ["--log_file_max_size=100", "--log_file_max_num=4"]
          securityContext:
            # capabilities required by OVS daemons
            capabilities:
              add:
                - SYS_NICE
                - NET_ADMIN
                - SYS_ADMIN
                - IPC_LOCK
          {{- if .Values.podProbe }}
          livenessProbe:
            exec:
              # docker CRI doesn't honor timeoutSeconds, add "timeout" to the command as a workaround.
              # https://github.com/kubernetes/kubernetes/issues/51901
              command:
                - /bin/sh
                - -c
                - timeout 10 container_liveness_probe ovs
            initialDelaySeconds: 5
            timeoutSeconds: 10
            periodSeconds: 10
            failureThreshold: 5
          {{- end }}
          volumeMounts:
          - name: host-var-run-kubefay
            mountPath: /var/run/openvswitch
            subPath: openvswitch
          - name: host-var-log-kubefay
            mountPath: /var/log/openvswitch
            subPath: openvswitch
          {{- if .Values.kindCluster.enabled }}
          - name: dev-tun
            mountPath: /dev/net/tun
          {{- end }}
      volumes:
        - name: kubefay-config
          configMap:
            name: kubefay-config
        - name: host-cni-conf
          hostPath:
            path: /etc/cni/net.d
        - name: host-cni-bin
          hostPath:
            path: /opt/cni/bin
        - name: host-proc
          hostPath:
            path: /proc
        - name: host-var-run-netns
          hostPath:
            path: /var/run/netns
        - name: host-var-run-kubefay
          hostPath:
            path: /var/run/kubefay
            # we use subPath to create run subdirectories for different component (e.g. OVS) and
            # subPath requires the base volume to exist
            type: DirectoryOrCreate
        - name: host-var-log-kubefay
          hostPath:
            path: /var/log/kubefay
            # we use subPath to create logging subdirectories for different component (e.g. OVS)
            type: DirectoryOrCreate
        - name: host-lib-modules
          hostPath:
            path: /lib/modules
        - name: host-depmod
          hostPath:
            path: /sbin/depmod
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        {{- if .Values.kindCluster.enabled }}
        - name: dev-tun
          hostPath:
            path: /dev/net/tun
            type: CharDevice
        {{- end }}
